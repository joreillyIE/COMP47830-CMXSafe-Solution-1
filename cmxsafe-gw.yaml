---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
  - apiGroups: [""]
    resources: ["services", "pods", "endpoints"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["extensions", "networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: default

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      serviceAccountName: external-dns
      containers:
      - name: external-dns
        image: registry.k8s.io/external-dns/external-dns:v0.16.1
        args:
        - --source=service
        - --provider=rfc2136
        - --rfc2136-host=192.168.1.29
        - --rfc2136-port=53
        - --rfc2136-zone=myservices.local
        - --rfc2136-insecure
        - --domain-filter=myservices.local
        - --log-level=debug

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cmxsafe-gw
spec:
  replicas: 1  # Three pod replicas simulating CMX-GWs
  selector:
    matchLabels:
      app: cmxsafe-gw
  template:
    metadata:
      labels:
        app: cmxsafe-gw
    spec:
      volumes:
        - name: iot-server-authorized-key
          secret:
            secretName: iot-server-authorized-key
            defaultMode: 384
        - name: iot-device-authorized-key
          secret:
            secretName: iot-device-authorized-key
            defaultMode: 384
        - name: iot-device-2-authorized-key
          secret:
            secretName: iot-device-2-authorized-key
            defaultMode: 384
        - name: sshd-config
          secret:
            secretName: cmxsafe-sshd-config
        - name: ssh-host-keys
          secret:
            secretName: cmxsafe-host-key
            defaultMode: 384
        - name: ssh-keys
          configMap:
            name: ssh-keys
        - name: scripts
          configMap:
            name: scripts
      containers:
      - name: cmxsafe-gw
        image: ubuntu:20.04  # Use a stable image
        ports:
        - containerPort: 22   # SSH Primary
        - containerPort: 2222 # SSH Secondary
        volumeMounts:
        - mountPath: /etc/ssh/cmxsafe-authorized-keys/a23ff868ec8f
          subPath: authorized_keys
          name: iot-server-authorized-key
          readOnly: true
        - mountPath: /etc/ssh/cmxsafe-authorized-keys/025f9a3db712
          subPath: authorized_keys
          name: iot-device-authorized-key
          readOnly: true
        - mountPath: /etc/ssh/cmxsafe-authorized-keys/0242ac110002
          subPath: authorized_keys
          name: iot-device-2-authorized-key
          readOnly: true
        - mountPath: /etc/ssh/cmxsafe-gw-config
          name: sshd-config
          readOnly: true
        - mountPath: /etc/ssh/cmxsafe-gw-keys
          name: ssh-host-keys
          readOnly: true
        - mountPath: /tmp/ssh-keys
          name: ssh-keys
        - mountPath: /tmp/scripts
          name: scripts
        command: ["/bin/bash", "-c"]
        args:
          - |
            
            # Update and install necessary packages
            apt-get update && apt-get install -y openssh-server openssh-client sudo dos2unix;
            #apt-get update && apt-get install -y iputils-arping iptables iproute2 net-tools tcpdump nano supervisor;

            # Configure SSHD
            mkdir -p /run/sshd;
            #echo "AllowTcpForwarding yes" >> /etc/ssh/sshd_config;
            #echo "PermitTunnel yes" >> /etc/ssh/sshd_config;
            #echo "GatewayPorts yes" >> /etc/ssh/sshd_config;
            #echo "PasswordAuthentication no" >> /etc/ssh/sshd_config;  # Enforce key authentication
            #echo "ChallengeResponseAuthentication no" >> /etc/ssh/sshd_config;
            #echo "UsePAM no" >> /etc/ssh/sshd_config;
            #echo "SyslogFacility AUTH" >> /etc/ssh/sshd_config;
            #echo "LogLevel DEBUG3" >> /etc/ssh/sshd_config;
            #echo "HostKey /etc/ssh/cmxsafe-gw-keys/ssh_host_ed25519_key" >> /etc/ssh/sshd_config;

            # Create secondary SSH config (port 2222)
            # cp /etc/ssh/sshd_config /etc/ssh/sshd_config_2;
            # echo "Port 2222" >> /etc/ssh/sshd_config_2;
            # echo "PidFile /var/run/sshd_2.pid" >> /etc/ssh/sshd_config_2;

            # Fix SSH authorized_keys issue
            # mkdir -p /root/.ssh
            # cp /tmp/ssh-keys/authorized_keys /root/.ssh/authorized_keys
            # chmod 700 /root/.ssh
            # chmod 600 /root/.ssh/authorized_keys
            # chown -R root:root /root/.ssh

            # Scripts
            mkdir -p /etc/cmxsafe_scripts
            chmod 755 /etc/cmxsafe_scripts
            chown root:root /etc/cmxsafe_scripts
            cp /tmp/scripts/createservice.sh /etc/cmxsafe_scripts/createservice.sh
            dos2unix /etc/cmxsafe_scripts/createservice.sh
            chmod 755 /etc/cmxsafe_scripts/createservice.sh

            # Initialize users
            MAC_SRV="a2:3f:f8:68:ec:8f"
            MAC_DEV="02:5f:9a:3d:b7:12"
            MAC_DEV_2="02:42:ac:11:00:02"

            # Function to format MAC address (remove colons and convert to uppercase)
            format_mac() {
                echo "$1" | sed 's/://g'
            }

            # Get formatted MAC addresses
            SERVER=$(format_mac "$MAC_SRV")
            DEVICE=$(format_mac "$MAC_DEV")
            DEVICE_2=$(format_mac "$MAC_DEV_2")

            for user in "$SERVER" "$DEVICE" "$DEVICE_2"; do
                adduser --disabled-password --gecos "" $user --force-badname
                mkdir -p /home/$user/.ssh
                cp /etc/ssh/cmxsafe-authorized-keys/$user /home/$user/.ssh/authorized_keys
                chmod 700 /home/$user/.ssh
                chmod 600 /home/$user/.ssh/authorized_keys
                chown -R $user:$user /home/$user/.ssh
            done

            echo "Match User $SERVER" >> /etc/ssh/sshd_config;
            echo "    ForceCommand /etc/cmxsafe_scripts/createservice.sh; sleep infinity" >> /etc/ssh/sshd_config;

            # sudo service ssh restart;

            # Start SSH server
            /usr/sbin/sshd -f /etc/ssh/cmxsafe-gw-config/sshd_config;
            #/usr/sbin/sshd -f /etc/ssh/sshd_config_2 -d -d -E /tmp/ssh.log;

            #apt-get purge -y sudo;

            # Keep container alive
            tail -f /dev/null;
